{
    "sourceFile": "js/script2.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1740439356899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1740439356899,
            "name": "Commit-0",
            "content": "//menu show y hidden\r\nconst navMenu = document.getElementById(\"nav-menu\");\r\nconst navToggle = document.getElementById(\"nav-toggle\");\r\nconst navClose = document.getElementById(\"nav-close\");\r\n\r\n//menu show\r\n// validate if contant exists\r\nif (navToggle) {\r\n  navToggle.addEventListener(\"click\", () => {\r\n    navMenu.classList.add(\"show-menu\");\r\n  });\r\n}\r\n//menu hidden\r\n// validate if contant exists\r\nif (navClose) {\r\n  navClose.addEventListener(\"click\", () => {\r\n    navMenu.classList.remove(\"show-menu\");\r\n  });\r\n}\r\n// ===== remove menu mobile  =====\r\nconst navLink = document.querySelectorAll(\".nav__link\");\r\n\r\nfunction linkAction() {\r\n  const navMenu = document.getElementById(\"nav-menu\");\r\n  // when we click on each navlink, we removed the show-menu class\r\n  navMenu.classList.remove(\"show-menu\");\r\n}\r\nnavLink.forEach((n) => n.addEventListener(\"click\", linkAction));\r\n\r\n//accordion skills\r\nconst skillsContent = document.getElementsByClassName(\"skills__content\"),\r\n  skillsHeader = document.querySelectorAll(\".skills__header\");\r\n\r\nfunction toggleSkills() {\r\n  let itemClass = this.parentNode.className;\r\n  for (i = 0; i < skillsContent.length; i++) {\r\n    skillsContent[i].className = \"skills__content skills__close\";\r\n  }\r\n  if (itemClass === \"skills__content skills__close\") {\r\n    this.parentNode.className = \"skills__content skills__open\";\r\n  }\r\n}\r\n\r\nskillsHeader.forEach((el) => {\r\n  el.addEventListener(\"click\", toggleSkills);\r\n});\r\n// QUALIFICATIN TABS\r\n\r\nconst tabs = document.querySelectorAll(\"[data-target]\");\r\nconst tabContents = document.querySelectorAll(\"[data-content]\");\r\n\r\ntabs.forEach((tab) => {\r\n  tab.addEventListener(\"click\", () => {\r\n    const target = document.querySelector(tab.dataset.target);\r\n\r\n    tabContents.forEach((tabContent) => {\r\n      tabContent.classList.remove(\"qualification__active\");\r\n    });\r\n    target.classList.add(\"qualification__active\");\r\n\r\n    tabs.forEach((tab) => {\r\n      tab.classList.remove(\"qualification__active\");\r\n    });\r\n    tab.classList.add(\"qualification__active\");\r\n  });\r\n});\r\n// ========== SERVICES MODAL  ============\r\nconst modalViews = document.querySelectorAll(\".services__modal\");\r\nconst modalBtns = document.querySelectorAll(\".services__button\");\r\nconst modalCloses = document.querySelectorAll(\".services__modal-close\");\r\n\r\nlet modal = function (modalClick) {\r\n  modalViews[modalClick].classList.add(\"active-modal\");\r\n};\r\n\r\nmodalBtns.forEach((modalBtn, index) => {\r\n  modalBtn.addEventListener(\"click\", () => {\r\n    modal(index);\r\n  });\r\n});\r\n\r\nmodalCloses.forEach((modalClose, index) => {\r\n  modalClose.addEventListener(\"click\", () => {\r\n    modalViews.forEach((modalView) => {\r\n      modalView.classList.remove(\"active-modal\");\r\n    });\r\n  });\r\n});\r\n\r\n// ====== POR TFO LIO SWIPER ======\r\nlet swiperPortfolio = new Swiper(\".portfolio__container\", {\r\n  cssMode: true,\r\n  loop: true,\r\n\r\n  navigation: {\r\n    nextEl: \".swiper-button-next\",\r\n    prevEl: \".swiper-button-prev\",\r\n  },\r\n  pagination: {\r\n    el: \".swiper-pagination\",\r\n    clickable: true,\r\n  },\r\n  // mousewheel: true,\r\n  // keyboard: true,\r\n});\r\n\r\n// ==== TESTIMONIAL ====\r\nlet swiperTestimonial = new Swiper(\".testimonial__container\", {\r\n  loop: true,\r\n  grabCursor: true,\r\n  spaceBetween: 48,\r\n\r\n  pagination: {\r\n    el: \".swiper-pagination\",\r\n    clickable: true,\r\n    dynamicBullets: true,\r\n  },\r\n  breakpoints: {\r\n    568: {\r\n      slidesPerView: 2,\r\n    },\r\n  },\r\n  // mousewheel: true,\r\n  // keyboard: true,\r\n});\r\n/* === SCROLL SECTIONs ACTIVE LINK === */\r\nconst sections = document.querySelectorAll(\"section[id]\");\r\n\r\nfunction scrollActive() {\r\n  const scrollY = window.pageYOffset;\r\n\r\n  sections.forEach((current) => {\r\n    const sectionHeight = current.offsetHeight;\r\n    const sectionTop = current.offsetTop - 50;\r\n    sectionId = current.getAttribute(\"id\");\r\n\r\n    if (scrollY > sectionTop && scrollY <= sectionTop + sectionHeight) {\r\n      document\r\n        .querySelector(\".nav__menu a[href*=\" + sectionId + \"]\")\r\n        .classList.add(\"active-link\");\r\n    } else {\r\n      document\r\n        .querySelector(\".nav__menu a[href*=\" + sectionId + \"]\")\r\n        .classList.remove(\"active-link\");\r\n    }\r\n  });\r\n}\r\nwindow.addEventListener(\"scroll\", scrollActive);\r\n\r\n/*=====  CHANGE BACKGROUND HEADER   =====*/\r\n\r\nfunction scrollHeader() {\r\n  const nav = document.getElementById(\"header\");\r\n  //when the scroll is greater than 200 viewport height, add to the header tag\r\n  if (this.scrollY >= 80) nav.classList.add(\"scroll-header\");\r\n  else nav.classList.remove(\"scroll-header\");\r\n}\r\nwindow.addEventListener(\"scroll\", scrollHeader);\r\n\r\n/*=====  SHOW SCROLL up  =====*/\r\nfunction scrollUp() {\r\n  const scrollUp = document.getElementById(\"scroll-Up\");\r\n  //when the scroll is higher than 560 viewport height, add show-scroll class  to the a tag with the scroll-top class\r\n  if (this.scrollY >= 560) scrollUp.classList.add(\"show-scroll\");\r\n  else scrollUp.classList.remove(\"show-scroll\");\r\n}\r\nwindow.addEventListener(\"scroll\", scrollUp);\r\n/*=====  DARK LIGHT THEME   =====*/\r\nconst themeButton = document.getElementById(\"theme-button\");\r\nconst darkTheme = \"dark-theme\";\r\nconst iconTheme = \"sunny-outline\";\r\n\r\n// perviously seleced topic ( if user selected)\r\nconst selectedTheme = localStorage.getItem(\"selected-theme\");\r\nconst selectedIcon = localStorage.getItem(\"selected-icon\");\r\n// we obtain the current theme that the interface has by valid\r\nconst getCurrentTheme = () =>\r\n  document.body.classList.contains(darkTheme) ? \"dark\" : \"light\";\r\nconst getCurrentIcon = () =>\r\n  themeButton.classList.contains(iconTheme) ? \"moon-outline\" : \"sunny-outline\";\r\n\r\n//we validate if the user previously chose a topic\r\nif (selectedTheme) {\r\n  //if the validation is fulfilled, we ask what the issue was to know if we active\r\n  document.body.classList[selectedTheme === \"dark\" ? \"add\" : \"remove\"](\r\n    darkTheme\r\n  );\r\n  themeButton.classList[selectedIcon === \"moon-outline\" ? \"add\" : \"remove\"](\r\n    iconTheme\r\n  );\r\n}\r\n// active / deactive the theme manually with the button\r\nthemeButton.addEventListener(\"click\", () => {\r\n  // Add or remove the dark / icon theme\r\n  document.body.classList.toggle(darkTheme);\r\n  themeButton.classList.toggle(iconTheme);\r\n  // We save the theme and the current icon that the user chose\r\n  localStorage.setItem(\"selected-theme\", getCurrentTheme());\r\n  localStorage.setItem(\"selected-icon\", getCurrentIcon());\r\n});\r\n"
        }
    ]
}